typedef enum {
  nt_primary_expression,
  nt_postfix_expression,
  nt_argument_expression_list,
  nt_unary_expression,
  nt_unary_operator,
  nt_cast_expression,
  nt_multiplicative_expression,
  nt_additive_expression,
  nt_shift_expression,
  nt_relational_expression,
  nt_equality_expression,
  nt_and_expression,
  nt_exclusive_or_expression,
  nt_inclusive_or_expression,
  nt_logical_or_expression,
  nt_logical_and_expression,
  nt_conditional_expression,
  nt_assignment_expression,
  nt_assignment_operator,
  nt_expression,
  nt_constant_expression,
  nt_declaration,
  nt_declaration_specifiers,
  nt_init_declarator_list,
  nt_init_declarator,
  nt_storage_class_specifier,
  nt_type_specifier,
  nt_struct_or_union_specifier,
  nt_struct_or_union,
  nt_struct_declaration_list,
  nt_struct_declaration,
  nt_specifier_qualifier_list,
  nt_struct_declarator_list,
  nt_struct_declarator,
  nt_enum_specifier,
  nt_enumerator_list,
  nt_enumerator,
  nt_type_qualifier,
  nt_function_specifier,
  nt_declarator,
  nt_direct_declarator,
  nt_pointer,
  nt_type_qualifier_list,
  nt_parameter_type_list,
  nt_parameter_list,
  nt_parameter_declaration,
  nt_identifier_list,
  nt_type_name,
  nt_abstract_declarator,
  nt_direct_abstract_declarator,
  nt_initializer,
  nt_initializer_list,
  nt_designation,
  nt_designator_list,
  nt_designator,
  nt_statement,
  nt_labeled_statement,
  nt_compound_statement,
  nt_block_item_list,
  nt_block_item,
  nt_expression_statement,
  nt_selection_statement,
  nt_iteration_statement,
  nt_jump_statement,
  nt_translation_unit,
  nt_external_declaration,
  nt_function_definition,
  nt_declaration_list,
} nodetype_t;
typedef struct ast {
  int nodetype;
  void *value;
}ast_node_t;
